#Q2: Cohen's d
#function definition of cohen's d
cohend <- function(x1, x2){
s = sqrt((length(x1)*(var(x1)+var(x2))-var(x1)-var(x2))/(2*length(x1)-2))
return((mean(x1)-mean(x2))/s)
}
#SUBJECT 15351
#for non words
nonWords <- total_data %>%
filter(Subject==15351 & IsWord==FALSE)
#for real words
Words <- total_data %>%
filter(Subject==15351 & IsWord==TRUE)
cohend(Words$RT, nonWords$RT)
#SUBJECT 16854
#for non words
nonWords <- total_data %>%
filter(Subject==16854 & IsWord==FALSE)
#for real words
Words <- total_data %>%
filter(Subject==16854 & IsWord==TRUE)
cohend(Words$RT, nonWords$RT)
#SUBJECT 170373
#for non words
nonWords <- total_data %>%
filter(Subject==170373 & IsWord==FALSE)
#for real words
Words <- total_data %>%
filter(Subject==170373 & IsWord==TRUE)
cohend(Words$RT, nonWords$RT)
#FOR ALL SUBJECTS
nonWords <- total_data %>%
filter(IsWord==FALSE)
Words <- total_data %>%
filter(IsWord==TRUE)
cohend(Words$RT, nonWords$RT)
#FOR SUBJ. 15292 by passing a vector
word_15292 <- c(2206, 1583, 1154, 1010, 865, 931, 1129, 683, 820, 1132, 1049, 1211, 1261, 957,
1058, 790, 851, 1908, 1504, 1400, 924)
pseudoword_15292 <- c(677, 949, 889, 881, 917, 769, 772, 922, 1944, 881, 976, 1087, 1252, 914,
1277, 825, 1295, 1336, 788, 885, 932)
cohend(word_15292, pseudoword_15292)
###############################################################################
###############################################################################
#Q3: Implementing t
tcalculation <- function(x1, x2){
mean_diff <- mean(x1)-mean(x2)
se <- sqrt((var(x1)/length(x1))+(var(x2)/length(x2)))
return(mean_diff/se)
}
#RTs for words and pseudowords for Subject numbered 15351
nonWords <- total_data %>%
filter(Subject==15351 & IsWord==FALSE)
#for real words
Words <- total_data %>%
filter(Subject==15351 & IsWord==TRUE)
tcalculation(Words$RT, nonWords$RT)
#RTs for all words and pseudowords.
nonWords <- total_data %>%
filter(IsWord==FALSE)
#for real words
Words <- total_data %>%
filter(IsWord==TRUE)
tcalculation(Words$RT, nonWords$RT)
#RTs for the two vectors provided below as word_15292 and pseudoword_15292
t_15292 <- tcalculation(word_15292, pseudoword_15292)
###############################################################################
t_15292
#Q4: transforming data and collecting p-values
generate.t <- function() {
mysample <- rnorm(20, mean = 0, sd = 10)
tvalue <- mean(mysample)/sqrt((var(mysample)/20))
tvalue
}
simulated_data <- rep(NA, 2e+05)
for (i in 1:length(simulated_data)) {
simulated_data[i] <- generate.t()
}
par(mfrow = c(2, 1))
hist(simulated_data)
hist(qt(ppoints(2e+05), df = 19))
#pt function as required from the exercise
pt(t_15292, 40)
#plotting distribution of RT - subj. 15292
par(mfrow = c(2,1))
hist(word_15292)
hist(pseudoword_15292)
#cube transform
cube_word_15292 <- word_15292^(1/3)
cube_pseudoword_15292 <- sqrt(pseudoword_15292)
#log transform
log_word_15292 <- log(word_15292)
log_pseudoword_15292 <- log(pseudoword_15292)
#inverse transform [BEST TRANSFORM]
inv_word_15292 <- word_15292^(-1)
inv_pseudoword_15292 <- pseudoword_15292^(-1)
#plotting the transformed data
plot_hist <- function(word, pseudoword){
par(mfrow = c(2, 1))
hist(word)
hist(pseudoword)
}
plot_hist(inv_word_15292, inv_pseudoword_15292)
#report p-value and t-value
t.test(inv_word_15292,inv_pseudoword_15292, alternative=c("two.sided"))
t.test(inv_pseudoword_15292, alternative=c("two.sided"))
##############################################################################
plot_hist(log_word_15292, log_pseudoword_15292)
#report p-value and t-value
t.test(inv_word_15292,inv_pseudoword_15292, alternative=c("two.sided"))
t.test(inv_word_15292,inv_pseudoword_15292, alternative=c("two.sided"))
t_15292 <- tcalculation(word_15292, pseudoword_15292)
t_15292
#RTs for the two vectors provided below as word_15292 and pseudoword_15292
t_15292 <- tcalculation(word_15292, pseudoword_15292, paired=TRUE)
t.test(inv_word_15292,inv_pseudoword_15292, alternative=c("two.sided"), paired=TRUE)
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
pseudoword <- total_data %>%
filter(IsWord==FALSE) %>%
group_by(Subject)
#PAIRED T-TEST (because participants both experienced words/pseudowords during
#the experiment)
t.test(word$RT, pseudoword$RT, alternative=c("two.sided"), paired=TRUE)
###############################################################################
#Linear Model
m1 <- lm(RT ~ IsWord, data=total_data)
m2 <- lm(RT ~ ACC, data=total_data)
m3 <- lm(RT ~ IsWord * ACC, data=total_data)
#Boxplot for IsWord affecting RTs
ggplot(total_data, aes(x=RT, y=IsWord, fill=IsWord))+
geom_boxplot()+
coord_flip()
#Q9: What frequency is the best predictor?
log_RT <- log(total_data$RT)
#FreqCOCA
model1 <- lm(log_RT ~ FreqCOCA, data=total_data)
#FreqGoogle
model2 <- lm(log_RT ~ FreqGoogle, data=total_data)
#FreqSUBTLEX
model3 <- lm(log_RT ~ FreqSUBTLEX, data=total_data)
#FreqCOCAspok
model4 <- lm(log_RT ~ FreqCOCAspok, data=total_data)
#Aggregate all the models
models <- list(model1, model2, model3, model4)
for (i in 1:length(models)){
cat("\nModel", i, ":\n")
print(summary(models[[i]]))
}
log_FreqGoogle <- log(total_data$FreqGoogle)
short_data <- data.frame(log_RT, log_FreqGoogle, FreqGoogle=total_data$FreqGoogle)
short_data <- short_data[!is.infinite(rowSums(short_data)),]
model2_log <- lm(log_RT ~ log_FreqGoogle, data=short_data)
print(summary(model2_log))
print(summary(model2))
#Plot 1: log(RT) & log(FreqGoogle)
ggplot(short_data, aes(x=log_FreqGoogle, y=log_RT))+
geom_point(alpha=0.2, size=1)+
geom_smooth(method="lm", se=FALSE)
#Plot 2: log(RT) & FreqGoogle
ggplot(short_data, aes(x=FreqGoogle, y=log_RT))+
geom_point(alpha=0.2, size=1)
#geom_smooth(method="lm", se=FALSE)
word
word$RT
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
pseudoword <- total_data %>%
filter(IsWord==FALSE) %>%
group_by(Subject)
#PAIRED T-TEST (because participants both experienced words/pseudowords during
#the experiment)
t.test(word$RT, pseudoword$RT, alternative=c("two.sided"), paired=TRUE)
#####################################################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject) %>%
mean(RT)
######################################################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject) %>%
mean($RT)
############################################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject) %>%
word <- mean(word)
###########################################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
word <- mean(word)
############################################################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
word <- mean(word$RT)
word
#############################################
#Q5: Aggregating data
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
word <- mean(word$RT)
pseudoword <- total_data %>%
filter(IsWord==FALSE) %>%
group_by(Subject)
pseudoword <- mean(pseudoword$RT)
#PAIRED T-TEST (because participants both experienced words/pseudowords during
#the experiment)
t.test(word$RT, pseudoword$RT, alternative=c("two.sided"), paired=TRUE)
word <- total_data %>%
filter(IsWord==TRUE) %>%
group_by(Subject)
word <- mean(word$RT)
pseudoword <- total_data %>%
filter(IsWord==FALSE) %>%
group_by(Subject)
pseudoword <- mean(pseudoword$RT)
#PAIRED T-TEST (because participants both experienced words/pseudowords during
#the experiment)
t.test(word, pseudoword, alternative=c("two.sided"), paired=TRUE)
setwd("C:/Users/FDB/Desktop/Runkeeper data")
#import the data
runkeeper <- read.csv("cardioActivities", sep=",", row.names=FALSE)
#import the data
runkeeper <- read.csv("cardioActivities.csv", sep=",", row.names=FALSE)
#import the data
runkeeper <- read.csv("cardioActivities.csv", sep=",", rownames_included=FALSE, na.strings="NA")
#import the data
runkeeper <- read.csv("cardioActivities.csv", sep=",", na.strings="NA")
runkeeper.head(10)
head(runkeeper)
summary(runkeeper)
print(summary(runkeeper))
any(runkeeper == "NA")
is.na(runkeeper)
any(is.na(runkeeper))
library(ggplot2)
library(tidyverse)
install.packages
install.packages("tidyverse")
library(ggplot2)
library(tidyverse)
#import the data
runkeeper <- read.csv("cardioActivities.csv", sep=",", na.strings="NA")
#first inspection after importing the data
head(runkeeper)
#Dataset size
dim(runkeeper)
#Column names of the dataset
print(colnames(runkeeper))
#Column names of the dataset
print(colnames(runkeeper)[5])
runkeeper %>%
rename("Distance"="Distance..km.", "Average.Speed"="Average.Speed..km.h.", "Climb"="Climb..m.", "Average.Heart.Rate"="Average.Heart.Rate..bpm.")
#Adding a comment to each column just renamed
runkeeper$Distance..km.
head(runkeeper)
##################################################################################################################################
#LIBRARY & DATASET IMPORTING
##################################################################################################################################
library(ggplot2)
library(tidyverse)
library(dplyr)
#import the data
runkeeper <- read.csv("cardioActivities.csv", sep=",", na.strings="NA")
#first inspection after importing the data
as_tibble(runkeeper)
#Renaming -> [Distance / Average speed / Climb / Average heart rate]
runkeeper %>%
rename("Distance"="Distance..km.", "Average.Speed"="Average.Speed..km.h.", "Climb"="Climb..m.", "Average.Heart.Rate"="Average.Heart.Rate..bpm.")
#Adding a comment to each column just renamed
runkeeper$Distance..km.
head(runkeeper)
runkeeper <- runkeeper %>%
rename("Distance"="Distance..km.", "Average.Speed"="Average.Speed..km.h.", "Climb"="Climb..m.", "Average.Heart.Rate"="Average.Heart.Rate..bpm.")
#Adding a comment to each column just renamed
runkeeper$Distance..km.
runkeeper$Distance <- comment(c("km"))
runkeeper$Average.Speed <- comment(c("km/h"))
runkeeper$Climb <- comment(c("m"))
runkeeper$Average.Heart.Rate <- comment(c("BPM"))
str(runkeeper)
comment(runkeeper$Distance) <- c("km")
source("~/.active-rstudio-document", echo=TRUE)
comment(runkeeper$Distance) <- c("Expressed in km")
comment(runkeeper$Average.Speed) <- c("Expressed in km/h")
comment(runkeeper$Climb) <- c("Expressed in m")
comment(runkeeper$Average.Heart.Rate) <- c("Expressed in BPM")
str(runkeeper)
#Inspection of NA values - Column names containing NA values
colnames(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
runkeeper(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
runkeeper[,is.na(runkeeper)]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper)]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper),]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper)]
#Inspection of NA values - Column names containing NA values
is.na(runkeeper)
#Inspection of NA values - Column names containing NA values
any(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
any(is.na(runkeeper)==TRUE)
#Inspection of NA values - Column names containing NA values
any(runkeeper[is.na(runkeeper)]==TRUE)
#Inspection of NA values - Column names containing NA values
(runkeeper[is.na(runkeeper)]==TRUE)
#Inspection of NA values - Column names containing NA values
is.na(runkeeper)
#Inspection of NA values - Column names containing NA values
colnames(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
colnames(is.na(runkeeper)==TRUE)
#Inspection of NA values - Column names containing NA values
colnames(runkeeper[is.na(runkeeper)==TRUE,])
(runkeeper[is.na(runkeeper)==TRUE, rowSums(runkeeper)])
#Inspection of NA values - Column names containing NA values
is.na(runkeeper)==TRUE
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper)==TRUE,]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper)==TRUE]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper)==TRUE,]
#Inspection of NA values - Column names containing NA values
runkeeper[is.na(runkeeper),]
is.na(runkeeper)
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(is.na(runkeeper)
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(is.na(runkeeper))
is.na(runkeeper)
colnames(runkeeper[,is.na(runkeeper)==TRUE])
colnames(runkeeper[is.na(runkeeper)==TRUE])
(runkeeper[is.na(runkeeper)==TRUE])
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(is.na(runkeeper))
is.na(runkeeper)
is.na(runkeeper)==TRUE
any(is.na(runkeeper)==TRUE)
any(runkeeper[is.na(runkeeper)==TRUE,])
(runkeeper[is.na(runkeeper)==TRUE,])
runkeeper %>% filter(is.na(runkeeper))
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(colnames(runkeeper))
is.na(runkeeper)
runkeeper[is.na(runkeeper), rowSums(is.na(runkeeper)]
runkeeper[, rowSums(is.na(runkeeper)]
runkeeper[, rowSums(is.na(runkeeper))]
runkeeper[rowSums(is.na(runkeeper))]
runkeeper[rowSums(is.na(runkeeper)), ]
runkeeper[, rowSums(is.na(runkeeper))]
runkeeper[is.na(runkeeper), rowSums(runkeeper)]
runkeeper[, rowSums(runkeeper)]
runkeeper[is.na(rowSums(runkeeper),]
runkeeper[is.na(rowSums(runkeeper)),]
runkeeper[is.na(sum(runkeeper)),]
all(is.na(runkeeper))
all(is.na(runkeeper$Friend.s.Tagged))
is.na(runkeeper)
is.na(runkeeper[,])
rowSums(is.na(runkeeper))
runkeeper[is.na(rowSums(runkeeper)),]
runkeeper[rowSums(is.na(runkeeper)),]
runkeeper[,rowSums(is.na(runkeeper))]
runkeeper[rowSums(is.na(runkeeper)),]
colnames(runkeeper[rowSums(is.na(runkeeper)),])
TRUE+TRUE
bool(TRUE+TRUE)
as.logical(TRUE+TRUE)
runkeeper[rowSums(is.na(runkeeper)),]
runkeeper[rowSums(is.na(runkeeper)), all(is.na(runkeeper))]
runkeeper[, all(is.na(runkeeper))]
runkeeper[, (is.na(runkeeper))]
subset(runkeeper[, (is.na(runkeeper))])
subset(runkeeper[, runkeeper(is.na(runkeeper))])
subset(runkeeper[, runkeeper[is.na(runkeeper)]])
(runkeeper[, runkeeper[is.na(runkeeper)]])
(runkeeper[is.na(runkeeper)])
(runkeeper[is.na(runkeeper),])
(runkeeper[is.na(runkeeper)==TRUE,])
(runkeeper[,is.na(runkeeper)==TRUE])
runkeeper$Friend.s.Tagged
runkeeper[,"Friend.s.Tagged"]
runkeeper[1,"Friend.s.Tagged"]
runkeeper[1,runkeeper[is.na(runkeeper)]]
runkeeper[1,is.na(runkeeper)]]
runkeeper[1,is.na(runkeeper)]
runkeeper[1,all(is.na(runkeeper))]
runkeeper[all(is.na(runkeeper))]
runkeeper[all(is.na(runkeeper)),]
all(is.na(runkeeper))
is.na(runkeeper[])
length(runkeeper)
is.na(runkeeper[,range(1,length(runkeeper))])
runkeeper[is.na(runkeeper[,range(1,length(runkeeper))])]
runkeeper[is.na(runkeeper[,range(1,length(runkeeper))]),]
runkeeper[is.na(runkeeper),]
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(colnames(runkeeper[,all(is.na(runkeeper))])
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(colnames(runkeeper[,all(is.na(runkeeper))]))
#Print out the new dataframe to see the improvements
str(runkeeper)
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(colnames(runkeeper[,all(is.na(runkeeper))]))
runkeeper[,all(is.na(runkeeper))]
runkeeper[rowSums(is.na(runkeeper)),]
colnames(runkeeper[,all(is.na(runkeeper))])
runkeeper[,all(is.na(runkeeper))]
runkeeper[rowSums(is.na(runkeeper)),]
as.logical(rowSums(is.na(runkeeper)),])
as.logical(rowSums(is.na(runkeeper)))
arowSums(is.na(runkeeper)
xx
rowSums(is.na(runkeeper))
runkeeper[as.logical(rowSums(is.na(runkeeper)))]
runkeeper[as.logical(rowSums(is.na(runkeeper))),]
runkeeper[,as.logical(rowSums(is.na(runkeeper))),]
runkeeper[,as.logical(rowSums(is.na(runkeeper)))]
runkeeper[,is.na(runkeeper)]
runkeeper[,is.na(runkeeper)==TRUE]
runkeeper[,runkeeper[is.na(runkeeper)]==TRUE]
#Inspection of NA values - Column names containing NA values
runkeeper %>% subset(runkeeper[rowSums(is.na(runkeeper))])
#Inspection of NA values - Column names containing NA values
runkeeper %>% subset(runkeeper[rowSums(is.na(runkeeper)),])
#Inspection of NA values - Column names containing NA values
runkeeper %>% subset(runkeeper[, rowSums(is.na(runkeeper))])
#Inspection of NA values - Column names containing NA values
runkeeper %>% subset(runkeeper[rowSums(is.na(runkeeper))])
#Inspection of NA values - Column names containing NA values
runkeeper %>% filter(runkeeper[rowSums(is.na(runkeeper))])
runkeeper[,any(is.na(runkeeper))]
runkeeper[,any(is.na(runkeeper))==TRUE]
any(is.na(runkeeper))
runkeeper[any(is.na(runkeeper))]
runkeeper[ ,any(is.na(runkeeper))]
runkeeper[ ,any(is.na(runkeeper)) == FALSE]
runkeeper[ ,!any(is.na(runkeeper))]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(range(length(runkeeper)), is.na]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(range(length(runkeeper)), is.na)]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(range(length(runkeeper)), is.na),]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(runkeeper, function(x), any(is.na(x))]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(runkeeper, function(x) any(is.na(x))]
#Inspection of NA values - Column names containing NA values
colnames(runkeeper)[sapply(runkeeper, function(x) any(is.na(x)))]
#As we can see from the previous line, the dataset has only 2 columns filled with NA-values
#By giving a close look to each column we see that Friend.s.Tagged is made of only NA-values, then we can remove it from the data
all(is.na(runkeeper$Friend.s.Tagged))
runkeeper <- remove(runkeeper$Friend.s.Tagged)
runkeeper <- remove(c("Friend.s.Tagged"))
runkeeper <- select(-Friend.s.Tagged)
runkeeper
runkeeper <- select(-(Friend.s.Tagged)
runkeeper <- select(-(Friend.s.Tagged))
#Print out the new dataframe to see the improvements
str(runkeeper)
runkeeper <- select(-(Friend.s.Tagged))
runkeeper <- runkeeper %>% select(-(Friend.s.Tagged))
runkeeper
source("~/.active-rstudio-document", echo=TRUE)
#Heart.Rate col inspection
count(is.na(runkeeper$Average.Heart.Rate))
#Heart.Rate col inspection
runkeeper[runkeeper$Average.Heart.Rate == NA,]
#Heart.Rate col inspection
runkeeper[runkeeper$Average.Heart.Rate == 'NA',]
#Heart.Rate col inspection
runkeeper %>% select(Average.Heart.Rate == NA)
#Heart.Rate col inspection
runkeeper %>% select((Average.Heart.Rate) == NA)
runkeeper %>% select((Average.Heart.Rate) == NA)
runkeeper %>% select((Average.Heart.Rate))
#Heart.Rate col inspection
runkeeper %>% filter(Average.Heart.Rate==NA)
#Heart.Rate col inspection
runkeeper %>% filter(runkeeper[Average.Heart.Rate==NA])
#Heart.Rate col inspection
runkeeper %>% filter(is.na(Average.Heart.Rate))
#Average.Heart.Rate col inspection
runkeeper %>% filter(is.na((Average.Heart.Rate))
#Average.Heart.Rate col inspection
runkeeper %>% filter(is.na((Average.Heart.Rate)))
#Average.Heart.Rate col inspection
runkeeper %>% filter(is.na((Average.Heart.Rate)))
sum(is.na(runkeeper$Average.Heart.Rate))
